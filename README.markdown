# Система ИИ для анализа КТ ОГК

## Описание проекта

**Система ИИ для анализа КТ ОГК** — это веб-приложение для классификации компьютерной томографии (КТ) органов грудной клетки на **НОРМА** или **ПАТОЛОГИЯ** с использованием нейронной сети. Приложение поддерживает загрузку ZIP-архивов с DICOM-файлами (`.dcm`) или изображениями (`.png`, `.jpg`, `.jpeg`), выполняет быстрые и точные предсказания с помощью обученной модели, генерирует отчёты в формате XLSX и отображает результаты в удобной таблице на веб-интерфейсе. Интерфейс включает drag-and-drop, прогресс-бар, переключение между светлой и тёмной темами и высококонтрастный текст для читаемости.

### Принцип работы модели

#### Нейронная сеть
- **Архитектура**: EfficientNet-B0 (по умолчанию, с возможностью выбора ResNet50 или DenseNet121), предобученная на ImageNet, с модифицированным классификатором (два линейных слоя с ReLU и dropout 30%).
- **Классификация**: Бинарная (0: НОРМА, 1: ПАТОЛОГИЯ).
- **Особенности**:
  - **Mixed Precision**: Используется `torch.cuda.amp` для ускорения обучения и инференса на GPU с меньшим потреблением памяти.
  - **Адаптивный Learning Rate**: `ReduceLROnPlateau` снижает скорость обучения при стагнации валидационной потери.
  - **Early Stopping**: Обучение останавливается, если AUC на валидации не улучшается в течение 5 эпох.
  - **Балансировка классов**: Используются веса классов в `CrossEntropyLoss` для компенсации дисбаланса (НОРМА/ПАТОЛОГИЯ).
  - **MixUp**: Аугментация данных с параметром `alpha=0.4` для повышения обобщающей способности.
  - **Метрики**: ROC AUC, Average Precision (AP), F1-score, confusion matrix, ROC и PR-кривые.

#### Предобработка изображений
- **Форматы**: Поддерживаются DICOM (`.dcm`), PNG, JPEG.
- **DICOM**:
  - Чтение с помощью `pydicom`.
  - Преобразование в единицы Хаунсфилда (HU) с использованием `RescaleIntercept` и `RescaleSlope`.
  - Применение оконной функции (лёгочное окно: center=-600, width=1500; медиастинальное окно: center=40, width=400).
  - Нормализация в [0, 255], объединение в 3-канальное изображение (RGB).
- **PNG/JPEG**: Чтение с `opencv-python`, преобразование в RGB, нормализация.
- **Аугментации** (только для обучения):
  - RandomResizedCrop, RandomRotate90, HorizontalFlip, VerticalFlip.
  - RandomBrightnessContrast, GaussNoise, RandomGamma, ElasticTransform, GridDistortion.
  - CLAHE, Sharpen, Normalize (среднее: [0.485, 0.456, 0.406], std: [0.229, 0.224, 0.225]).
- **Размер**: Все изображения масштабируются до 224x224 пикселей.

#### Обучение
- **Датасет**:
  ```
  ct_data/
  ├── normal/       # Изображения без патологий
  │   └── *.(dcm/png/jpg/jpeg)
  └── pathology/    # Изображения с патологиями
      └── *.(dcm/png/jpg/jpeg)
  ```
- **Разделение данных**: 70% train, 20% validation, 10% test (с k-fold кросс-валидацией).
- **Оптимизатор**: AdamW (lr=1e-4, weight_decay=1e-5).
- **Аугментации**: Применяются через `albumentations` для повышения устойчивости модели.
- **Сохранение**: Лучшая модель сохраняется по AUC в `./models/best_model_auc_<score>.pth`.

#### Инференс
- **Предсказание**: Для одного файла или папки через `CTPredictor`.
- **Выход**:
  - Класс (НОРМА/ПАТОЛОГИЯ) и уверенность (вероятность).
  - Визуализация: PNG-изображение с наложением предсказания и уверенности.
  - XLSX-отчёт с колонками: `path_to_study`, `study_uid`, `series_uid`, `probability_of_pathology`, `pathology`, `processing_status`, `time_of_processing`.

#### Веб-интерфейс
- **Технологии**: FastAPI (сервер), HTML+JavaScript+Bootstrap (фронтенд).
- **Функционал**:
  - Загрузка ZIP-архивов через drag-and-drop или выбор файлов.
  - Таблица результатов с цветовым кодированием (зелёный для НОРМА/Success, красный для ПАТОЛОГИЯ/Failure).
  - Скачивание XLSX-отчёта.
  - Переключение светлой/тёмной темы.
  - Прогресс-бар и список загруженных файлов.

---

## Установка и запуск

### Требования
- **Операционная система**: Windows (разрабатывалось на этой ОС), Linux или macOS.
- **Python**: 3.13 (разрабатывалось на этой версии).
- **Модель**: Файл `best_model_auc_1.0000.pth` в папке `models/`.

### Структура проекта
```
project_directory/
├── ct.py                  # Логика модели, предобработка, обучение, инференс
├── server.py              # FastAPI сервер
├── index.html             # Веб-интерфейс
├── requirements.txt       # Зависимости
├── models/
│   └── best_model_auc_1.0000.pth  # Файл обученной модели
├── reports/               # Папка для XLSX-отчётов (создаётся автоматически)
├── static/                # Папка для статических файлов (пустая)
└── README.md             # Документация
```

### Установка

1. **Создай виртуальное окружение** (рекомендуется):
   ```bash
   python -m venv venv
   .\venv\Scripts\activate  # На Windows
   source venv/bin/activate  # На Linux/Mac
   ```

2. **Установи зависимости**:
   ```bash
   pip install -r requirements.txt
   ```
   Содержимое `requirements.txt`

3. **Запусти сервер**:
   ```bash
   python server.py
   ```
   - Сервер будет доступен на `http://localhost:8000`.
   - В консоли появится примерно:
     ```
     INFO:     Started server process [12345]
     INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
     ```

---

## Использование интерфейса

1. **Открой веб-интерфейс**:
   - В браузере (Chrome, Firefox, Edge) перейди на `http://localhost:8000`.
   - Ты увидишь страницу с заголовком **"Система ИИ для анализа КТ ОГК"**.

2. **Загрузи ZIP-архивы**:
   - **Перетащи файлы**: Перетащи ZIP-архив с DICOM-файлами(формат .dcm) зону drag-and-drop (пунктирная рамка с иконкой загрузки).
   - **Или выбери файлы**: Нажми на зону drag-and-drop, чтобы открыть диалог выбора файлов, и выбери ZIP-архив с DICOM-файлами(формат .dcm).
   - Список загруженных файлов появится под зоной (имя файла с иконкой архива).
   - (примечание, **в папке test-data пример ZIP архива с обезличенными файлами DICOM(.dcm)**)

3. **Запусти анализ**:
   - Нажми кнопку **"Анализировать"** (активируется после выбора файлов).
   - Прогресс-бар покажет процесс обработки (имитация, до 100%).
   - После завершения:
     - Появится сообщение: **"Обработка завершена: X архив(ов) обработано"**.
     - Таблица отобразит результаты для каждого файла:
       - **Путь**: путь внутри архива.
       - **Study UID**: идентификатор исследования (для DICOM).
       - **Series UID**: идентификатор серии (для DICOM).
       - **Вероятность патологии**: в процентах (0–100%).
       - **Патология**: НОРМА (зелёный) или ПАТОЛОГИЯ (красный).
       - **Статус**: Success (зелёный) или Failure (красный).
       - **Время (с)**: время обработки.
     - Появится кнопка **"Скачать отчёт (XLSX)"**.

4. **Скачай отчёт**:
   - Нажми **"Скачать отчёт (XLSX)"**, чтобы загрузить файл `report_<timestamp>.xlsx`.
   - Открой в Excel и проверь данные (они совпадают с таблицей).

5. **Очисти список файлов**:
   - Нажми **"Очистить"**, чтобы удалить загруженные файлы и сбросить результаты.

6. **Переключи тему**:
   - Нажми **"Тёмная тема"** или **"Светлая тема"** в правом верхнем углу (иконка луны/солнца).
   - Тема сохраняется в `localStorage`.

---

## Устранение проблем

1. **Сервер не запускается**:
   - Проверь `server.log`:
     ```bash
     type server.log  # На Windows
     ```
   - Убедись, что все зависимости установлены:
     ```bash
     pip install -r requirements.txt
     ```
   - Проверь наличие модели: `models/best_model_auc_1.0000.pth`.

### Анализ датасета
- Запусти анализ данных:
  ```python
  from ct import DataAnalyzer
  DataAnalyzer.analyze_dataset("./ct_data")
  ```
- Получи статистику: количество файлов, распределение классов, форматы, размеры, уникальные пациенты, модальности.

---
